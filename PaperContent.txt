Title:
Design and analysis of RTOS and interrupt based data handling system for nanosatellites

Abstract:
In this paper, we describe the design and working of the data handling system of a Nanosatellite that houses three interconnected microcontrollers, each present on a different PCB. The three microcontrollers used are namely: STM32F207IG, MSP430F5438A and STM32L431CC. A brief description of the evolution of the system organisation and the motivation behind the choice of the microcontrollers has been provided. Each microcontroller handles and performs a set of tasks to ensure smooth and proper functioning of the satellite. An in-depth explanation of these tasks and their distribution among the three microcontrollers has been provided. The STM32F207IG microcontroller is present on the primary PCB and is responsible for interfacing with different on-board sensors and the thermal camera, for running the attitude determination and control and the power management algorithms and for processing and transmitting the payload data. The MSP430F5438A is present on the secondary PCB and performs the task of controlling all mechanisms of the satellite which includes the antenna, door and tether deployment, the collection of health data of the satellite from the other two microcontrollers, the transmission of beacon data and receiving any up-links from the ground station. The functioning of the reaction wheels present on the satellite is handled by the STM32L431CC microcontroller. The scheduling of tasks on STM32F2 and MSP430 is brought about through the use of a Real-Time Operating System (RTOS), Micrium OS-III, which allows the system to be sensitive to the priorities and time constraints of each task. An in-depth qualitative analysis of the application of the RTOS has been presented along with a vigorous quantitative analysis through the use of Segger SystemView for STM32F2 and the Sampled Graph feature in IAR for MSP430. In contrast to the implementation of an RTOS on STM32F2 and MSP430, the STM32L4 is run and controlled purely through interrupts from STM32F2 and MSP430. The paper provides an explanation for the use of a partial OS based and partial interrupt based task switching model and lists out the advantages and limitations of the same. The paper also describes the various stages involved in the onboard processing of images obtained from the thermal camera, which includes image tiling, image compression and data encoding algorithms before transmitting. The encoding algorithms help in reducing data loss during transmission and allow error detection and correction upon reception of the payload data.

Introduction:

Performance Comparison Of OS-based and Interrupt-based Systems:
The system organisation revolves around OS based and interrupt based task scheduling. The STM32F2 and MSP430 implement task scheduling with the help of an RTOS whereas the STM32L4 uses interrupt based task management. The tasks on STM32F2 and MSP430 are long lasting and hence can starve other tasks in the absense of an OS. They have strict deadlines and ordering issues 

Lessons Learnt:

